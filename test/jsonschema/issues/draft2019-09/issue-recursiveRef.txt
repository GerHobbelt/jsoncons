1. $ref

We can resolve id for the referenced schema

a. Resolve ref (e.g. "#/$defs/myobject") against baseUri (e.g. "http://localhost:4242/draft2019-09/recursiveRef3/schema.json")
   into id (e.g. "http://localhost:4242/draft2019-09/recursiveRef3/$defs/myobject")
b. Look it up, if schema exists, return it wrapped in a validator_wrapper,
   ow is there an unresolved ref_validator, if yes, return that
   ow return a new ref_validator holding the id

2. $recursiveRef

We can't resolve id for the referenced schema yet, 
could resolve to "http://localhost:4242/draft2019-09/recursiveRef3/$defs/myobject"

    {
        "anyOf": [
            { "type": "string" },
            {
                "type": "object",
                "additionalProperties": { "$recursiveRef": "#" }
            }
        ]
    }

could resolve to "http://localhost:4242/draft2019-09/recursiveRef3/schema.json"

    {
        "anyOf": [
            { "type": "integer" },
            { "$ref": "#/$defs/myobject" }
        ]
    }

Let's say $ref resolves to "http://localhost:4242/draft2019-09/recursiveRef3/$defs/myobject",
which is a schema that contains a "$recursiveRef".

The get for that schema provides a baseUri if "$recursiveAnchor": true
The schema has a "$recursiveRef". So it needs something else than a validator_wrapper.
We don't know the id of the validator to wrap.

We have the ref ("#")

recursive_ref_validator

    ref (#)
    baseUri
        

a. Resolve against baseUri with $recursiveAnchor
b. Look it up, if schema exists, return it wrapped in a validator_wrapper,
   ow is there an unresolved ref_validator, if yes, return that
   ow return a ref_validator

void insert_schema(const schema_location& uri, validator_pointer s)
{
    auto& file = get_or_create_file(uri.base().string());
    auto schemas_it = file.schemas.find(std::string(uri.fragment()));
    if (schemas_it != file.schemas.end()) 
    {
        //JSONCONS_THROW(schema_error("schema with " + uri.string() + " already inserted"));
        return;
    }

    file.schemas.insert({std::string(uri.fragment()), s});

    // is there an unresolved reference to this newly inserted schema?
    auto unresolved_it = file.unresolved.find(std::string(uri.fragment()));
    if (unresolved_it != file.unresolved.end()) 
    {
        unresolved_it->second->set_referred_schema(s);
        file.unresolved.erase(unresolved_it);
    }
}
 
template <class Json>
class ref_validator : public keyword_validator<Json>
{
    using validator_type = typename std::unique_ptr<keyword_validator<Json>>;
    using validator_pointer = typename keyword_validator<Json>::self_pointer;

    validator_pointer referred_schema_;

public:
    ref_validator(const std::string& id)
        : keyword_validator<Json>(id), referred_schema_(nullptr) {}

    void set_referred_schema(validator_pointer target) { referred_schema_ = target; }

private:

    void do_validate(const Json& instance, 
        const jsonpointer::json_pointer& instance_location,
        std::unordered_set<std::string>& unevaluated_properties, 
        error_reporter& reporter, 
        Json& patch) const override
    {
        if (!referred_schema_)
        {
            reporter.error(validation_output("", 
                                             this->schema_path(), 
                                             instance_location.to_uri_fragment(), 
                                             "Unresolved schema reference " + this->schema_path()));
            return;
        }

        referred_schema_->validate(instance, instance_location, unevaluated_properties, reporter, patch);
    }
};

it = schema.find("$recursiveRef");
if (it != schema.object_range().end()) // this schema is a reference
{
    std::string ref_string = it->value().template as<std::string>();
    schema_location relative(ref_string); 
    auto base_uri = context.get_base_uri(uri_anchor_flags::recursive_anchor);
    auto id = relative.resolve(base_uri);
    std::cout << "$recursiveRef " << relative.string() << ", " << id.string() << "\n";
    //if (!id.is_absolute())
    //{
    //    JSONCONS_THROW(jsonschema::schema_error("Relative reference " + ref_string + " not resolveable."));
    //}
    auto ref =  get_or_create_reference(id);
    auto ptr = ref.get();
    subschemas_.emplace_back(std::move(ref));
    recursive_ref_validator = jsoncons::make_unique<reference_validator_type>(ptr);
} 

validator_type get_or_create_reference(const schema_location& uri)
{
    auto &file = get_or_create_file(uri.base().string());

    // a schema already exists
    auto sch = file.schemas.find(std::string(uri.fragment()));
    if (sch != file.schemas.end())
        return jsoncons::make_unique<reference_validator_type>(sch->second);

    // referencing an unknown keyword, turn it into schema
    //
    // an unknown keyword can only be referenced by a JSONPointer,
    // not by a plain name identifier
    if (uri.has_fragment() && !uri.has_plain_name_fragment()) 
    {
        std::string fragment = std::string(uri.fragment());
        auto unprocessed_keywords_it = file.unprocessed_keywords.find(fragment);
        if (unprocessed_keywords_it != file.unprocessed_keywords.end()) 
        {
            auto &subsch = unprocessed_keywords_it->second; 
            auto s = make_schema_validator(subsch, compilation_context(uri), {});       //  A JSON Schema MUST be an object or a boolean.
            file.unprocessed_keywords.erase(unprocessed_keywords_it);
            return s;
        }
    }

    // get or create a ref_validator
    auto ref = file.unresolved.find(std::string(uri.fragment()));
    if (ref != file.unresolved.end()) 
    {
        //return ref->second; // unresolved, use existing reference
        return jsoncons::make_unique<reference_validator_type>(ref->second);
    }
    else 
    {
        auto orig = jsoncons::make_unique<ref_validator<Json>>(uri.string());
        auto p = file.unresolved.insert(ref,
                                      {std::string(uri.fragment()), orig.get()})
            ->second; // unresolved, create new reference
        
        subschemas_.emplace_back(std::move(orig));
        return jsoncons::make_unique<reference_validator_type>(p);
    }
}

